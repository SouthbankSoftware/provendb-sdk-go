//
// ProvenDB
// Copyright (C) 2020  Southbank Software Ltd.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

// Anchor Service continuously anchors hashes to blockchains, which is similar
// to what Chainpoint does, but with much better performance and flexibility. It
// supports multiple anchor types and proof formats. Digital signing can be also
// done at the Merkle root level

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.15.6
// source: github.com/SouthbankSoftware/provendb-apis/anchor/anchor.proto

package anchor

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type represents an anchor type. Please refer to this
// [list](https://docs.proofable.io/concepts/anchor_types.html) for all
// available anchor types
type Anchor_Type int32

const (
	// [Ethereum](https://ethereum.org/) Rinkeby Testnet
	Anchor_ETH Anchor_Type = 0
	// Ethereum Mainnet. [Ethereum](https://ethereum.org/) is the second-largest
	// cryptocurrency
	Anchor_ETH_MAINNET Anchor_Type = 3
	// [Elastos](https://www.elastos.org/), which employs a "main
	// chain-sidechain architecture"
	Anchor_ETH_ELASTOS Anchor_Type = 4
	// [GoChain](https://gochain.io/), which is scalable, low cost and energy
	// efficient
	Anchor_ETH_GOCHAIN Anchor_Type = 9
	// [Bitcoin](https://bitcoin.org/) Testnet
	Anchor_BTC Anchor_Type = 1
	// Bitcoin Mainnet. [Bitcoin](https://bitcoin.org/) is the largest
	// cryptocurrency
	Anchor_BTC_MAINNET Anchor_Type = 5
	// [Chainpoint](https://chainpoint.org/)
	Anchor_CHP Anchor_Type = 2
	// Hedera Testnet
	Anchor_HEDERA Anchor_Type = 6
	// Hedera Mainnet. [Hedera](https://www.hedera.com/) is a DAG based
	// blockchain that provides much better TPS than tranditional blockchains
	Anchor_HEDERA_MAINNET Anchor_Type = 7
	// [Hyperledger Fabric](https://www.hyperledger.org/use/fabric), which is a
	// modular blockchain framework for private enterprises
	Anchor_HYPERLEDGER Anchor_Type = 8
)

// Enum value maps for Anchor_Type.
var (
	Anchor_Type_name = map[int32]string{
		0: "ETH",
		3: "ETH_MAINNET",
		4: "ETH_ELASTOS",
		9: "ETH_GOCHAIN",
		1: "BTC",
		5: "BTC_MAINNET",
		2: "CHP",
		6: "HEDERA",
		7: "HEDERA_MAINNET",
		8: "HYPERLEDGER",
	}
	Anchor_Type_value = map[string]int32{
		"ETH":            0,
		"ETH_MAINNET":    3,
		"ETH_ELASTOS":    4,
		"ETH_GOCHAIN":    9,
		"BTC":            1,
		"BTC_MAINNET":    5,
		"CHP":            2,
		"HEDERA":         6,
		"HEDERA_MAINNET": 7,
		"HYPERLEDGER":    8,
	}
)

func (x Anchor_Type) Enum() *Anchor_Type {
	p := new(Anchor_Type)
	*p = x
	return p
}

func (x Anchor_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Anchor_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_enumTypes[0].Descriptor()
}

func (Anchor_Type) Type() protoreflect.EnumType {
	return &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_enumTypes[0]
}

func (x Anchor_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Anchor_Type.Descriptor instead.
func (Anchor_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{0, 0}
}

// Status represents an anchor's status
type Anchor_Status int32

const (
	// Error means the anchor has an error
	Anchor_ERROR Anchor_Status = 0
	// STOPPED means the anchor is stopped
	Anchor_STOPPED Anchor_Status = 1
	// RUNNING means the anchor is running
	Anchor_RUNNING Anchor_Status = 2
)

// Enum value maps for Anchor_Status.
var (
	Anchor_Status_name = map[int32]string{
		0: "ERROR",
		1: "STOPPED",
		2: "RUNNING",
	}
	Anchor_Status_value = map[string]int32{
		"ERROR":   0,
		"STOPPED": 1,
		"RUNNING": 2,
	}
)

func (x Anchor_Status) Enum() *Anchor_Status {
	p := new(Anchor_Status)
	*p = x
	return p
}

func (x Anchor_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Anchor_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_enumTypes[1].Descriptor()
}

func (Anchor_Status) Type() protoreflect.EnumType {
	return &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_enumTypes[1]
}

func (x Anchor_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Anchor_Status.Descriptor instead.
func (Anchor_Status) EnumDescriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{0, 1}
}

// Status represents a batch's status
type Batch_Status int32

const (
	// ERROR means the batch has an error. FLOW: * -> ERROR
	Batch_ERROR Batch_Status = 0
	// BATCHING means the batch is batching for more hashes. FLOW: created_at ->
	// BATCHING -> flushed_at
	Batch_BATCHING Batch_Status = 1
	// QUEUING means the batch is queuing to be processed. FLOW: flushed_at ->
	// QUEUING -> started_at
	Batch_QUEUING Batch_Status = 2
	// PROCESSING means the batch is constructing merkle roots and submitting
	// hashes. FLOW: started_at -> PROCESSING -> submitted_at
	Batch_PROCESSING Batch_Status = 3
	// PENDING means the batch's root hash is pending to be confirmed. FLOW:
	// submitted_at -> PENDING -> finalized_at
	Batch_PENDING Batch_Status = 4
	// CONFIRMED means the batch's root hash is confirmed by the anchor's
	// blockchain. FLOW: finalized_at -> CONFIRMED
	Batch_CONFIRMED Batch_Status = 5
)

// Enum value maps for Batch_Status.
var (
	Batch_Status_name = map[int32]string{
		0: "ERROR",
		1: "BATCHING",
		2: "QUEUING",
		3: "PROCESSING",
		4: "PENDING",
		5: "CONFIRMED",
	}
	Batch_Status_value = map[string]int32{
		"ERROR":      0,
		"BATCHING":   1,
		"QUEUING":    2,
		"PROCESSING": 3,
		"PENDING":    4,
		"CONFIRMED":  5,
	}
)

func (x Batch_Status) Enum() *Batch_Status {
	p := new(Batch_Status)
	*p = x
	return p
}

func (x Batch_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Batch_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_enumTypes[2].Descriptor()
}

func (Batch_Status) Type() protoreflect.EnumType {
	return &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_enumTypes[2]
}

func (x Batch_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Batch_Status.Descriptor instead.
func (Batch_Status) EnumDescriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{1, 0}
}

// Format represents a proof format
type Proof_Format int32

const (
	// CHP_PATH means Chainpoint Path format, which is the format used by
	// Chainpoint
	Proof_CHP_PATH Proof_Format = 0
	// ETH_TRIE means Ethereum Trie format
	Proof_ETH_TRIE Proof_Format = 1
	// CHP_PATH_SIGNED means signed Chainpoint Path format
	Proof_CHP_PATH_SIGNED Proof_Format = 2
	// ETH_TRIE_SIGNED means signed Ethereum Trie format
	Proof_ETH_TRIE_SIGNED Proof_Format = 3
)

// Enum value maps for Proof_Format.
var (
	Proof_Format_name = map[int32]string{
		0: "CHP_PATH",
		1: "ETH_TRIE",
		2: "CHP_PATH_SIGNED",
		3: "ETH_TRIE_SIGNED",
	}
	Proof_Format_value = map[string]int32{
		"CHP_PATH":        0,
		"ETH_TRIE":        1,
		"CHP_PATH_SIGNED": 2,
		"ETH_TRIE_SIGNED": 3,
	}
)

func (x Proof_Format) Enum() *Proof_Format {
	p := new(Proof_Format)
	*p = x
	return p
}

func (x Proof_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Proof_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_enumTypes[3].Descriptor()
}

func (Proof_Format) Type() protoreflect.EnumType {
	return &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_enumTypes[3]
}

func (x Proof_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Proof_Format.Descriptor instead.
func (Proof_Format) EnumDescriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{2, 0}
}

// Anchor represents an anchor of a blockchain, through which a hash can be
// anchored to that blockchain
type Anchor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the anchor type
	Type Anchor_Type `protobuf:"varint,1,opt,name=type,proto3,enum=anchor.Anchor_Type" json:"type,omitempty"`
	// Status is the anchor status
	Status Anchor_Status `protobuf:"varint,2,opt,name=status,proto3,enum=anchor.Anchor_Status" json:"status,omitempty"`
	// Error is the error message when the anchor status is ERROR
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// SupportedFormats are the supported proof formats of the anchor
	SupportedFormats []Proof_Format `protobuf:"varint,4,rep,packed,name=supported_formats,json=supportedFormats,proto3,enum=anchor.Proof_Format" json:"supported_formats,omitempty"`
}

func (x *Anchor) Reset() {
	*x = Anchor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Anchor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Anchor) ProtoMessage() {}

func (x *Anchor) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Anchor.ProtoReflect.Descriptor instead.
func (*Anchor) Descriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{0}
}

func (x *Anchor) GetType() Anchor_Type {
	if x != nil {
		return x.Type
	}
	return Anchor_ETH
}

func (x *Anchor) GetStatus() Anchor_Status {
	if x != nil {
		return x.Status
	}
	return Anchor_ERROR
}

func (x *Anchor) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Anchor) GetSupportedFormats() []Proof_Format {
	if x != nil {
		return x.SupportedFormats
	}
	return nil
}

// Batch represents a batch of hashes. When hash stream comes in, Anchor Service
// will try to process them in batches, just like blockchain processes
// transactions in blocks. This makes utilization of expensive resources, such
// as making Bitcoin transaction, more economic. Each batch's root hash will be
// embedded in a transaction made to the blockchain
type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is the batch ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// AnchorType is the batch's anchor type
	AnchorType Anchor_Type `protobuf:"varint,2,opt,name=anchor_type,json=anchorType,proto3,enum=anchor.Anchor_Type" json:"anchor_type,omitempty"`
	// ProofFormat is the batch's proof format, which determines how the merkle
	// tree is constructed for the batch.
	ProofFormat Proof_Format `protobuf:"varint,3,opt,name=proof_format,json=proofFormat,proto3,enum=anchor.Proof_Format" json:"proof_format,omitempty"`
	// Status is the batch status. FLOW: created_at -> BATCHING -> flushed_at ->
	// QUEUING -> started_at -> PROCESSING -> submitted_at -> PENDING ->
	// finalized_at -> CONFIRMED / ERROR; * -> ERROR; if a batch has not yet
	// reached PENDING and its anchor has restarted, the batch will be put back to
	// QUEUING
	Status Batch_Status `protobuf:"varint,4,opt,name=status,proto3,enum=anchor.Batch_Status" json:"status,omitempty"`
	// Error is the error message when status is ERROR
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// Size is the number of hashes contained in the batch
	Size int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// CreateAt is the batch's created at timestamp. FLOW: created_at -> BATCHING
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// FlushedAt is the batch's flushed at timestamp. FLOW: BATCHING -> flushed_at
	// -> QUEUING
	FlushedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=flushed_at,json=flushedAt,proto3" json:"flushed_at,omitempty"`
	// StartedAt is the batch's started at timestamp. FLOW: QUEUING -> started_at
	// -> PROCESSING
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// SubmittedAt is the batch's submitted at timestamp. FLOW: PROCESSING ->
	// submitted_at -> PENDING
	SubmittedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	// FinalizedAt is the batch's finalized at timestamp. FLOW: * -> finalized_at
	// -> CONFIRMED / ERROR. NOTE: this is not the real block confirmed time, use
	// the timestamp in the batch data instead
	FinalizedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=finalized_at,json=finalizedAt,proto3" json:"finalized_at,omitempty"`
	// Hash is the batch's root hash
	Hash string `protobuf:"bytes,12,opt,name=hash,proto3" json:"hash,omitempty"`
	// Data is the batch data in JSON
	Data string `protobuf:"bytes,13,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{1}
}

func (x *Batch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Batch) GetAnchorType() Anchor_Type {
	if x != nil {
		return x.AnchorType
	}
	return Anchor_ETH
}

func (x *Batch) GetProofFormat() Proof_Format {
	if x != nil {
		return x.ProofFormat
	}
	return Proof_CHP_PATH
}

func (x *Batch) GetStatus() Batch_Status {
	if x != nil {
		return x.Status
	}
	return Batch_ERROR
}

func (x *Batch) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Batch) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Batch) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Batch) GetFlushedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FlushedAt
	}
	return nil
}

func (x *Batch) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Batch) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *Batch) GetFinalizedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinalizedAt
	}
	return nil
}

func (x *Batch) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Batch) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// Proof represents a blockchain proof of a hash, which is a Merkle path from
// the hash to the root hash of the proof's batch
type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash is the hash the proof is proving for
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// BatchId is the proof's batch ID
	BatchId string `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// AnchorType is the proof's anchor type
	AnchorType Anchor_Type `protobuf:"varint,3,opt,name=anchor_type,json=anchorType,proto3,enum=anchor.Anchor_Type" json:"anchor_type,omitempty"`
	// BatchStatus is the proof's batch status
	BatchStatus Batch_Status `protobuf:"varint,4,opt,name=batch_status,json=batchStatus,proto3,enum=anchor.Batch_Status" json:"batch_status,omitempty"`
	// Format is the proof format
	Format Proof_Format `protobuf:"varint,5,opt,name=format,proto3,enum=anchor.Proof_Format" json:"format,omitempty"`
	// Data is the proof data in base64
	Data string `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	// Batch is the proof's batch detail
	Batch *Batch `protobuf:"bytes,7,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{2}
}

func (x *Proof) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Proof) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *Proof) GetAnchorType() Anchor_Type {
	if x != nil {
		return x.AnchorType
	}
	return Anchor_ETH
}

func (x *Proof) GetBatchStatus() Batch_Status {
	if x != nil {
		return x.BatchStatus
	}
	return Batch_ERROR
}

func (x *Proof) GetFormat() Proof_Format {
	if x != nil {
		return x.Format
	}
	return Proof_CHP_PATH
}

func (x *Proof) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Proof) GetBatch() *Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

// AnchorRequest represents a request to get information for the given anchor
// type
type AnchorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the anchor type
	Type Anchor_Type `protobuf:"varint,1,opt,name=type,proto3,enum=anchor.Anchor_Type" json:"type,omitempty"`
}

func (x *AnchorRequest) Reset() {
	*x = AnchorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorRequest) ProtoMessage() {}

func (x *AnchorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorRequest.ProtoReflect.Descriptor instead.
func (*AnchorRequest) Descriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{3}
}

func (x *AnchorRequest) GetType() Anchor_Type {
	if x != nil {
		return x.Type
	}
	return Anchor_ETH
}

// ProofRequest represents a proof request
type ProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash is the hash the proof is proving for
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// BatchId is the proof's batch ID
	BatchId string `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// AnchorType is the proof's anchor type
	AnchorType Anchor_Type `protobuf:"varint,3,opt,name=anchor_type,json=anchorType,proto3,enum=anchor.Anchor_Type" json:"anchor_type,omitempty"`
	// WithBatch indicates whether to include the proof's batch detail
	WithBatch bool `protobuf:"varint,4,opt,name=with_batch,json=withBatch,proto3" json:"with_batch,omitempty"`
}

func (x *ProofRequest) Reset() {
	*x = ProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofRequest) ProtoMessage() {}

func (x *ProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofRequest.ProtoReflect.Descriptor instead.
func (*ProofRequest) Descriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{4}
}

func (x *ProofRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ProofRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *ProofRequest) GetAnchorType() Anchor_Type {
	if x != nil {
		return x.AnchorType
	}
	return Anchor_ETH
}

func (x *ProofRequest) GetWithBatch() bool {
	if x != nil {
		return x.WithBatch
	}
	return false
}

// SubmitProofRequest represents a submit proof request
type SubmitProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash is the hash to be submitted
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// AnchorType is the anchor type to be used
	AnchorType Anchor_Type `protobuf:"varint,2,opt,name=anchor_type,json=anchorType,proto3,enum=anchor.Anchor_Type" json:"anchor_type,omitempty"`
	// Format is the proof format to be used
	Format Proof_Format `protobuf:"varint,3,opt,name=format,proto3,enum=anchor.Proof_Format" json:"format,omitempty"`
	// SkipBatching indicates whether to skip batching and submit a proof for the
	// hash directly
	SkipBatching bool `protobuf:"varint,4,opt,name=skip_batching,json=skipBatching,proto3" json:"skip_batching,omitempty"`
	// WithBatch indicates whether to include the batch detail in the reply
	WithBatch bool `protobuf:"varint,5,opt,name=with_batch,json=withBatch,proto3" json:"with_batch,omitempty"`
}

func (x *SubmitProofRequest) Reset() {
	*x = SubmitProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitProofRequest) ProtoMessage() {}

func (x *SubmitProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitProofRequest.ProtoReflect.Descriptor instead.
func (*SubmitProofRequest) Descriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{5}
}

func (x *SubmitProofRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SubmitProofRequest) GetAnchorType() Anchor_Type {
	if x != nil {
		return x.AnchorType
	}
	return Anchor_ETH
}

func (x *SubmitProofRequest) GetFormat() Proof_Format {
	if x != nil {
		return x.Format
	}
	return Proof_CHP_PATH
}

func (x *SubmitProofRequest) GetSkipBatching() bool {
	if x != nil {
		return x.SkipBatching
	}
	return false
}

func (x *SubmitProofRequest) GetWithBatch() bool {
	if x != nil {
		return x.WithBatch
	}
	return false
}

// VerifyProofRequest represents a verify proof request
type VerifyProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AnchorType is the proof's anchor type
	AnchorType Anchor_Type `protobuf:"varint,1,opt,name=anchor_type,json=anchorType,proto3,enum=anchor.Anchor_Type" json:"anchor_type,omitempty"`
	// Format is the proof format. If skipping the signature checking is desired,
	// please use the corresponding non-signed format, eg. use CHP_PATH instead of
	// CHP_PATH_SIGNED in request
	Format Proof_Format `protobuf:"varint,2,opt,name=format,proto3,enum=anchor.Proof_Format" json:"format,omitempty"`
	// Data is the proof data in base64
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *VerifyProofRequest) Reset() {
	*x = VerifyProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProofRequest) ProtoMessage() {}

func (x *VerifyProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProofRequest.ProtoReflect.Descriptor instead.
func (*VerifyProofRequest) Descriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{6}
}

func (x *VerifyProofRequest) GetAnchorType() Anchor_Type {
	if x != nil {
		return x.AnchorType
	}
	return Anchor_ETH
}

func (x *VerifyProofRequest) GetFormat() Proof_Format {
	if x != nil {
		return x.Format
	}
	return Proof_CHP_PATH
}

func (x *VerifyProofRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// VerifyProofReply represents a verify proof reply
type VerifyProofReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Verified indicates whether the proof is verified
	Verified bool `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	// Erorr is the error message when the proof is falsified
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// ProvenHash is the hash the proof is proving for
	ProvenHash string `protobuf:"bytes,3,opt,name=provenHash,proto3" json:"provenHash,omitempty"`
}

func (x *VerifyProofReply) Reset() {
	*x = VerifyProofReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyProofReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProofReply) ProtoMessage() {}

func (x *VerifyProofReply) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProofReply.ProtoReflect.Descriptor instead.
func (*VerifyProofReply) Descriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{7}
}

func (x *VerifyProofReply) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *VerifyProofReply) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *VerifyProofReply) GetProvenHash() string {
	if x != nil {
		return x.ProvenHash
	}
	return ""
}

// BatchRequest represents a batch request
type BatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BatchId is the batch ID
	BatchId string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// AnchorType is the batch's anchor type
	AnchorType Anchor_Type `protobuf:"varint,2,opt,name=anchor_type,json=anchorType,proto3,enum=anchor.Anchor_Type" json:"anchor_type,omitempty"`
}

func (x *BatchRequest) Reset() {
	*x = BatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRequest) ProtoMessage() {}

func (x *BatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRequest.ProtoReflect.Descriptor instead.
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{8}
}

func (x *BatchRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchRequest) GetAnchorType() Anchor_Type {
	if x != nil {
		return x.AnchorType
	}
	return Anchor_ETH
}

// SubscribeBatchesRequest represents a subscription request for batch
// information
type SubscribeBatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter is the batch filter. When nil, all batches of all anchors will be
	// subscribed; otherwise, only the batches of the given anchor will be
	// subscribed; if batch_id is non-empty, only the matched batch will be
	// subscribed
	Filter *BatchRequest `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *SubscribeBatchesRequest) Reset() {
	*x = SubscribeBatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeBatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeBatchesRequest) ProtoMessage() {}

func (x *SubscribeBatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeBatchesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeBatchesRequest) Descriptor() ([]byte, []int) {
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeBatchesRequest) GetFilter() *BatchRequest {
	if x != nil {
		return x.Filter
	}
	return nil
}

var File_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto protoreflect.FileDescriptor

var file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6f, 0x75,
	0x74, 0x68, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6e, 0x64, 0x62, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x2f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x03, 0x0a, 0x06, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x41, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45,
	0x54, 0x48, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x4e, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x54, 0x48, 0x5f, 0x45, 0x4c, 0x41,
	0x53, 0x54, 0x4f, 0x53, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x54, 0x48, 0x5f, 0x47, 0x4f,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x54, 0x43, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x54, 0x43, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10,
	0x05, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x48, 0x50, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45,
	0x44, 0x45, 0x52, 0x41, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x45, 0x44, 0x45, 0x52, 0x41,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x59,
	0x50, 0x45, 0x52, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x52, 0x10, 0x08, 0x22, 0x2d, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x91, 0x05, 0x0a, 0x05, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x5a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x54, 0x43, 0x48,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x45, 0x55, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x05, 0x22, 0xdc,
	0x02, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x22, 0x4e, 0x0a,
	0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x50, 0x5f, 0x50,
	0x41, 0x54, 0x48, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x5f, 0x54, 0x52, 0x49,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x50, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x48, 0x5f,
	0x54, 0x52, 0x49, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x22, 0x38, 0x0a,
	0x0d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0xd0, 0x01, 0x0a,
	0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22,
	0x8c, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64,
	0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x5f, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x32, 0xb0,
	0x03, 0x0a, 0x0d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x15, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x00,
	0x12, 0x31, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x2e, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x1a, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1a,
	0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x14, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1f, 0x2e,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x00, 0x30,
	0x01, 0x42, 0x63, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x64,
	0x62, 0x2e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x42, 0x0b, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x64, 0x62, 0x2d, 0x73,
	0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0xa2, 0x02, 0x03, 0x41, 0x43, 0x48, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescOnce sync.Once
	file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescData = file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDesc
)

func file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescGZIP() []byte {
	file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescOnce.Do(func() {
		file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescData)
	})
	return file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDescData
}

var file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_goTypes = []interface{}{
	(Anchor_Type)(0),                // 0: anchor.Anchor.Type
	(Anchor_Status)(0),              // 1: anchor.Anchor.Status
	(Batch_Status)(0),               // 2: anchor.Batch.Status
	(Proof_Format)(0),               // 3: anchor.Proof.Format
	(*Anchor)(nil),                  // 4: anchor.Anchor
	(*Batch)(nil),                   // 5: anchor.Batch
	(*Proof)(nil),                   // 6: anchor.Proof
	(*AnchorRequest)(nil),           // 7: anchor.AnchorRequest
	(*ProofRequest)(nil),            // 8: anchor.ProofRequest
	(*SubmitProofRequest)(nil),      // 9: anchor.SubmitProofRequest
	(*VerifyProofRequest)(nil),      // 10: anchor.VerifyProofRequest
	(*VerifyProofReply)(nil),        // 11: anchor.VerifyProofReply
	(*BatchRequest)(nil),            // 12: anchor.BatchRequest
	(*SubscribeBatchesRequest)(nil), // 13: anchor.SubscribeBatchesRequest
	(*timestamppb.Timestamp)(nil),   // 14: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),           // 15: google.protobuf.Empty
}
var file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_depIdxs = []int32{
	0,  // 0: anchor.Anchor.type:type_name -> anchor.Anchor.Type
	1,  // 1: anchor.Anchor.status:type_name -> anchor.Anchor.Status
	3,  // 2: anchor.Anchor.supported_formats:type_name -> anchor.Proof.Format
	0,  // 3: anchor.Batch.anchor_type:type_name -> anchor.Anchor.Type
	3,  // 4: anchor.Batch.proof_format:type_name -> anchor.Proof.Format
	2,  // 5: anchor.Batch.status:type_name -> anchor.Batch.Status
	14, // 6: anchor.Batch.created_at:type_name -> google.protobuf.Timestamp
	14, // 7: anchor.Batch.flushed_at:type_name -> google.protobuf.Timestamp
	14, // 8: anchor.Batch.started_at:type_name -> google.protobuf.Timestamp
	14, // 9: anchor.Batch.submitted_at:type_name -> google.protobuf.Timestamp
	14, // 10: anchor.Batch.finalized_at:type_name -> google.protobuf.Timestamp
	0,  // 11: anchor.Proof.anchor_type:type_name -> anchor.Anchor.Type
	2,  // 12: anchor.Proof.batch_status:type_name -> anchor.Batch.Status
	3,  // 13: anchor.Proof.format:type_name -> anchor.Proof.Format
	5,  // 14: anchor.Proof.batch:type_name -> anchor.Batch
	0,  // 15: anchor.AnchorRequest.type:type_name -> anchor.Anchor.Type
	0,  // 16: anchor.ProofRequest.anchor_type:type_name -> anchor.Anchor.Type
	0,  // 17: anchor.SubmitProofRequest.anchor_type:type_name -> anchor.Anchor.Type
	3,  // 18: anchor.SubmitProofRequest.format:type_name -> anchor.Proof.Format
	0,  // 19: anchor.VerifyProofRequest.anchor_type:type_name -> anchor.Anchor.Type
	3,  // 20: anchor.VerifyProofRequest.format:type_name -> anchor.Proof.Format
	0,  // 21: anchor.BatchRequest.anchor_type:type_name -> anchor.Anchor.Type
	12, // 22: anchor.SubscribeBatchesRequest.filter:type_name -> anchor.BatchRequest
	15, // 23: anchor.AnchorService.GetAnchors:input_type -> google.protobuf.Empty
	7,  // 24: anchor.AnchorService.GetAnchor:input_type -> anchor.AnchorRequest
	8,  // 25: anchor.AnchorService.GetProof:input_type -> anchor.ProofRequest
	9,  // 26: anchor.AnchorService.SubmitProof:input_type -> anchor.SubmitProofRequest
	10, // 27: anchor.AnchorService.VerifyProof:input_type -> anchor.VerifyProofRequest
	12, // 28: anchor.AnchorService.GetBatch:input_type -> anchor.BatchRequest
	13, // 29: anchor.AnchorService.SubscribeBatches:input_type -> anchor.SubscribeBatchesRequest
	4,  // 30: anchor.AnchorService.GetAnchors:output_type -> anchor.Anchor
	4,  // 31: anchor.AnchorService.GetAnchor:output_type -> anchor.Anchor
	6,  // 32: anchor.AnchorService.GetProof:output_type -> anchor.Proof
	6,  // 33: anchor.AnchorService.SubmitProof:output_type -> anchor.Proof
	11, // 34: anchor.AnchorService.VerifyProof:output_type -> anchor.VerifyProofReply
	5,  // 35: anchor.AnchorService.GetBatch:output_type -> anchor.Batch
	5,  // 36: anchor.AnchorService.SubscribeBatches:output_type -> anchor.Batch
	30, // [30:37] is the sub-list for method output_type
	23, // [23:30] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_init() }
func file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_init() {
	if File_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Anchor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyProofReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeBatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_goTypes,
		DependencyIndexes: file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_depIdxs,
		EnumInfos:         file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_enumTypes,
		MessageInfos:      file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_msgTypes,
	}.Build()
	File_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto = out.File
	file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_rawDesc = nil
	file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_goTypes = nil
	file_github_com_SouthbankSoftware_provendb_apis_anchor_anchor_proto_depIdxs = nil
}
